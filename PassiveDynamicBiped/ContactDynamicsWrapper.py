#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Sun May  7 23:31:33 2017

@author: Shruti
"""

import numpy as np
from numpy import linalg as la
import pylab as plt

def ContactHeight(gamma,alpha,l_0,l2x,l2y,rFoot,gx,gy,m1,m2,j2):
    #CONTACTHEIGHT
    #    CONTHEIGHT = CONTACTHEIGHT(GAMMA,ALPHA,L_0,L2X,L2Y,RFOOT,GX,GY,M1,M2,J2)

    #    This function was generated by the Symbolic Math Toolbox version 5.4.


    contHeight = np.dot(-(np.cos(alpha+gamma)-np.cos(gamma)), (l_0-rFoot))
    return contHeight

def ContactJacobian(x,y,gamma,alpha,l_0,l2x,l2y,rFoot,gx,gy,m1,m2,j2):
    #CONTACTJACOBIAN
    #    J_CONT = CONTACTJACOBIAN(X,Y,GAMMA,ALPHA,L_0,L2X,L2Y,RFOOT,GX,GY,M1,M2,J2)


    t761 = l_0 - rFoot
    J_cont = np.asarray([[1.0,0.0,rFoot+ np.dot(t761, np.cos(gamma)), 0.0], [0.0, 1.0, np.dot(t761, np.sin(gamma)),0.0]])
    J_cont = np.reshape(J_cont, (2, 4), order='C')
    return J_cont
    
def ContactMassMatrix(x,y,gamma,alpha,l_0,l2x,l2y,rFoot,gx,gy,m1,m2,j2):
    #CONTACTMASSMATRIX
    #    M_CONT = CONTACTMASSMATRIX(X,Y,GAMMA,ALPHA,L_0,L2X,L2Y,RFOOT,GX,GY,M1,M2,J2)
    ex1 = m1 + m2*2.0
    ex2 = np.dot(m2, (np.dot(l2x,np.cos(alpha+gamma))- np.dot(l2y,np.sin(alpha+gamma))+np.dot(l2x,np.cos(gamma))-np.dot(l2y,np.sin(gamma)))) 
    ex3 = np.dot(m2, (np.dot(l2x, np.cos(alpha+gamma) - np.dot(l2y, np.sin(alpha+gamma)))))
    ex4 = np.dot(m2,(np.dot(l2y, np.cos(alpha+gamma)) + np.dot(l2x, np.sin(alpha+gamma)) + np.dot(l2y, np.cos(gamma)) + np.dot(l2x, np.sin(gamma))))
    ex5 = np.dot(m2,(np.dot(l2y, np.cos(alpha+gamma)) + np.dot(l2x, np.sin(alpha+gamma))))
    ex6 = np.dot(m2,(np.dot(l2x, np.cos(alpha+gamma)) - np.dot(l2y, np.sin(alpha+gamma)) + np.dot(l2x, np.cos(gamma)) - np.dot(l2y, np.sin(gamma))))
    ex7 = np.dot(m2,(np.dot(l2y, np.cos(alpha+gamma)) + np.dot(l2x, np.sin(alpha+gamma)) + np.dot(l2y, np.cos(gamma)) + np.dot(l2x, np.sin(gamma))))
    ex8 = j2 + np.dot(np.dot(l2x, l2x), m2) + np.dot(np.dot(l2y, l2y),m2)
    ex9 = np.dot(m2,(np.dot(l2x, np.cos(alpha+gamma)) - np.dot(l2y, np.sin(alpha+gamma))))
    ex10 = np.dot(m2,(np.dot(l2y, np.cos(alpha+gamma)) + np.dot(l2x, np.sin(alpha+gamma))))
    ex11 = j2 + np.dot(np.dot(l2x, l2x), m2) + np.dot(np.dot(l2y,l2y),m2)
    ex12 = j2 + np.dot(np.dot(l2x,l2x), m2) + np.dot(np.dot(l2y,l2y),m2)

    
    
    M_cont = np.asarray([[ex1,0.0,ex2,ex3,0.0,m1+m2*2.0, ex4,ex5,ex6,ex7,j2*2.0 + np.dot(np.dot(l2x, l2x), m2*2.0) + np.dot(np.dot(l2y,l2y), m2*2.0), ex8 ,ex9, ex10, ex11,ex12]]);
    M_cont = np.reshape(M_cont, (4,4))
    return M_cont

    
def ContactDynamicsWrapper(y, p):
    # Map the generalized coordinates:
    # Keep the index-structs in memory to speed up processing
    gamma = y[0]
    alpha = y[2]
    
    # Map the system parameters:
    # Keep the index-structs in memory to speed up processing

    gx    = p[0]
    gy    = p[1]
    l_0   = p[2]
    m1    = p[3]
    m2    = p[4]
    l2x   = p[5]
    l2y   = p[6]
    rFoot = p[7]
    j2    = p[8]
    
    # Call the auto-generated function
    contHeight = ContactHeight(gamma,alpha,l_0,l2x,l2y,rFoot,gx,gy,m1,m2,j2)  
    x  =  -gamma*rFoot - np.sin(gamma)*(l_0 - rFoot)
    y_ =   rFoot + np.cos(gamma)*(l_0 - rFoot)

    M_cont = ContactMassMatrix(x,y_,gamma,alpha,l_0,l2x,l2y,rFoot,gx,gy,m1,m2,j2);
    J_cont = ContactJacobian(x,y_,gamma,alpha,l_0,l2x,l2y,rFoot,gx,gy,m1,m2,j2);

    return contHeight, M_cont, J_cont
    
    
